# -*- coding: utf-8 -*-
"""inference_demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/open-mmlab/mmdetection/blob/master/demo/inference_demo.ipynb
"""

from mmdet.apis import init_detector, inference_detector,  show_result_pyplot
from mmdet.apis.inference import inference_detector_server
import os
import numpy as np
import mmcv

os.environ["CUDA_VISIBLE_DEVICES"] = "0"

IMAGE_DIR = '/home/user/Dataset/Seoulchallenge/test_0218_class5/images/val2017/'
save_inferanno_dir = '/home/user/Dataset/Seoulchallenge/test_0218_class5/OD_Infer_ep239'#'/home/user/Dataset/Seoulchallenge/test_0210/OD_Infer'
# config_file = '../configs/test.py' #class_6
config_file = '../configs/cascade_mask_rcnn_x101_64x4d_fpn_1x.py' #class_6
# download the checkpoint from model zoo and put it in `checkpoints/`
checkpoint_file = "/home/user/Work/mmdetection/tools/logs/latest.pth" #epoch_68.pth"

show = 1
makemAPtxt = 0
# build the model from a config file and a checkpoint file
model = init_detector(config_file, checkpoint_file, device='cuda:0')

CLASSES = ('fire','smoke','car','building','person','cemetery')

# test a single image
if not (os.path.isdir(save_inferanno_dir)):
    os.makedirs(save_inferanno_dir)


filenames = os.listdir(IMAGE_DIR)
for filename in filenames:
    file_dir = os.path.join(IMAGE_DIR, filename)
    file_dir = '/home/user/Dataset/Seoulchallenge/test_0210/images/train2017/Cemetery_80.jpg'
    # file_dir = '/home/user/Dataset/Seoulchallenge/test_0210/images/train2017/Fire_Smoke_40.jpg'

    img = mmcv.imread(file_dir)
    size = (4912,7360)

    if ".jpg" in filename.lower():
        # result = inference_detector(model, file_dir)#img)
        result = inference_detector_server(model,img,size)

        # show the results
        if show:
            print(file_dir)
            show_result_pyplot(file_dir, result, CLASSES)#,fig_size=(1920,1080))

        if isinstance(result, tuple):
            bbox_result, _ = result # bbox_result, segm_result
            test = 0
        else:
            bbox_result, segm_result = result, None

        # bboxes = np.vstack(bbox_result)

        if makemAPtxt:
            # ## make mAP cal txt ##
            with open(save_inferanno_dir+"/" + os.path.splitext(filename)[0]+".txt","w") as f:
                for class_id in range(len(bbox_result)):
                    for object_num in range(len(bbox_result[class_id])):#range(np.vstack(bbox_result)):
                        bbox_left   = str((bbox_result[class_id][object_num][0]))#str(int(r['rois'][idx][1]))
                        bbox_top    = str((bbox_result[class_id][object_num][1]))
                        bbox_right  = str((bbox_result[class_id][object_num][2]))
                        bbox_bottom = str((bbox_result[class_id][object_num][3]))
                        score       = str((bbox_result[class_id][object_num][4]))

                        f.write(str(class_id+1) + " "+ score + " ")
                        f.write(bbox_left + " " + bbox_top + " " + bbox_right + " " + bbox_bottom + '\n')

